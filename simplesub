#!/bin/bash
# Simple, self-contained take on 'sub'
# Version 1

set -euo pipefail

main () {
    scriptname="${0##*/}"
    script="$(abs_script_path "$0")"
    scriptdir="$(cd "$(dirname "$script")" && pwd -P)"
    if ! [ -d "$scriptdir/libexec" ] && ! [ -d "$scriptdir/../libexec" ]; then
        script="$(resolved_script_path "$0")"
        scriptdir="$(cd "$(dirname "$script")" && pwd -P)"
    fi
    PATH="$PATH:$scriptdir/libexec:$scriptdir/../libexec:$scriptdir"

    command=
    if [ $# -gt 0 ]; then
        command="$1"
        shift
    fi

    evalf 'export _%s_SCRIPT="%s"' "$(echo "$scriptname" | tr '[:lower:]' '[:upper:]')" "$script"
    evalf 'export _%s_ROOT="%s"' "$(echo "$scriptname" | tr '[:lower:]' '[:upper:]')" "$scriptdir"

    case "$command" in
        "" | "-h" | "--help")
            command=help
            ;;
        --complete)
            command=completions
            ;;
    esac

    # The -setup script is run to bootstrap before any other commands
    setup_path="$(command -v "$scriptname-sh--setup" 2>/dev/null)" || :
    if [ -n "$setup_path" ]; then
        eval "$(exec "$scriptname-sh--setup" "$@")"
    else
        setup_path="$(command -v "$scriptname--setup" 2>/dev/null)" || :
        if [ -n "$setup_path" ]; then
            eval "\"$setup_path\""
        fi
    fi

    command_path="$(command -v "$scriptname-$command" 2>/dev/null)" || :
    if [ -n "$command_path" ]; then
        exec "$command_path" "$@"
    else
        if declare -f run_"$command" >/dev/null 2>&1; then
            eval "run_$command "'"$@"'
        else
            die "command not found: $scriptname-$command"
        fi
    fi
}

run_help () {
    run_help_internal "$@"
}

run_help_internal () {
    if [ $# -ne 0 ] && [ "$1" != help ]; then
        if has_feature "$1" short_help; then
            exec "$script" "$1" "-h"
        elif has_feature "$1" help; then
            exec "$script" "$1" "--help"
        else
            echo >&2 "No help available for $1"
            return 1
        fi
    else
        echo >&2 "Usage: $scriptname COMMAND [ARGS..]"
        echo >&2
        echo >&2 "For command help: $scriptname help COMMAND"
        echo >&2
        echo >&2 "Available commands:"
        run_commands | sed 's,^,  ,' >&2
    fi
}

run_completions () {
    run_completions_internal "$@"
}

run_completions_internal () {
    if [ $# -eq 0 ]; then
        echo commands
        echo completions
        printf '%s\n' '--complete'
        printf '%s\n' '-h'
        printf '%s\n' '--help'
        run_commands "$@"
    else
        subcommand="$1"
        shift
        if has_feature "$subcommand" completions; then
            exec "$script" "$subcommand" --complete "$@"
        else
            return 1
        fi

    fi
}

run_commands () {
    run_commands_internal "$@"
}

run_commands_internal () {
    {
        echo help
        echo "$PATH" | tr ":" "\n" | while read -r path; do
            if [ -n "$path" ] && [ -z "${path##/*}" ]; then
                for i in "$path/$scriptname-"*; do
                    if [ -x "$i" ]; then
                        basename -- "${i#$path/$scriptname-}"
                    fi
                done
            fi
        done \
            | sed -e 's/^sh-//' \
            | grep -vx '\-setup' \
            | grep -vx 'sh--setup'
    } \
        | sort -u
}

run_init () {
    scriptname_upper="$(echo "$scriptname" | tr '[:lower:]' '[:upper:]')"
    abs_script="$(abs_script_path "$0")"
    declare -f _placeholder \
        | sed -e "s/placeholder/$scriptname/g; s/PLACEHOLDER/$scriptname_upper/g; s#SCRIPT#$abs_script#g;"
    printf 'alias %s=_%s\n' "$scriptname" "$scriptname"
}

run_has_feature () {
    has_feature "$@"
}

_placeholder () {
    if [ $# -gt 0 ]; then
        placeholder_command="$1"
        shift
        case "$placeholder_command" in
			sh-*)
				echo >&2 "Error: 'placeholder $placeholder_command' should be run as 'placeholder ${placeholder_command#sh-}'"
				return 1
				;;
		esac
        _PLACEHOLDER_ROOT="$(cd "$(dirname "$(command -v placeholder 2>/dev/null)")" && pwd -P)"
        PATH="$PATH:${_PLACEHOLDER_ROOT}/libexec:${_PLACEHOLDER_ROOT}/../libexec"
        command_path="$(command -v "placeholder-sh-${placeholder_command}" 2>/dev/null)" || :
        if [ -n "$command_path" ]; then
            # shellcheck disable=SC1090
            . "$command_path" "$@"
        else
            "SCRIPT" "$placeholder_command" "$@"
        fi
    else
        # shellcheck disable=SC2091
        "SCRIPT"
    fi
}

has_feature () {
    command_path="$(command -v "$scriptname-sh-$1" 2>/dev/null)" || :
    if [ -z "$command_path" ]; then
        command_path="$(command -v "$scriptname-$1" 2>/dev/null)" || return 1
    fi
    sed -n -e "s/^# $scriptname: //p" "$command_path" | tr ' ' '\n' | grep -Fxq "$2"
}

die () {
    echo >&2 "$@"
    exit 1
}

evalf () {
    fmt="$1"
    shift
    # printf >&2 "evalf: $fmt\n" "$@"
    # eval echo >&2 "evalf: $(printf "$fmt" "$@")"
    # shellcheck disable=SC2059
    eval "$(printf "$fmt" "$@")"
}

resolved_script_path () {
    script="$(abs_script_path "$1")"
    while [ -L "$script" ]; do
        script="$(abs_readlink "$script")"
    done
    echo "$script"
}

abs_script_path () {
    script="$1"
    if [ ! -e "$script" ]; then
        if [ -n "${script##*/}" ]; then
            command -v "$script"
        fi
        if [ ! -e "$script" ]; then
            echo >&2 "Error: unable to determine script location"
            exit 1
        fi
    else
        abspath "$script"
    fi
}

abs_readlink () {
    for arg; do
        abspath "$(readlink "$arg")" "$(dirname "$arg")"
    done
}

abspath () {
    _path="$1"
    if [ -n "${_path##/*}" ]; then
        _path="${2:-$PWD}/$1"
    fi
    echo "$_path"
}

main "$@"
